This is the diode starting guide. It is not a full documentation,
but aims to provide a rough introduction to the code base.

General Structure
===================
main.js is called first, setting most browser elements, key combinations and
the like. It is also setting up and handling the toolbar at the top and initializes
GoldenLayout.
DIODE itself has a singleton (diode instanceof DIODE), that is commonly available
in all elements composing DIODE. Because DIODE supports multi-window setups,
no diode instance may be assumed to be global, i.e. a new instance is created
_at least_ per window. Use as a static class to be safe.
A goldenlayout element is a component, which saves to a (global) state.
Every DIODE element (window/pane) is a goldenlayout component.
See registerComponent() in main.js.
To manage and interact with DIODE, every component has a DIODE_Context (or subclass)
instantiated that manages the component. This includes utility functions.
GoldenLayout works using componentState. This is a JSON-Serialized state saved on change
and loaded when a window is popped-out or the site is reloaded.
Components that wish to appear identially after being popped-out must save and load to state
(DIODE_Context::extendState/resetState/getState() provides a wrapper for state functions).
Caution: The state is saved to the sessionStorage/localStorage. This has a limit of 10MB combined.
Do not save unnecessary stuff, and consider compressing when space becomes low.


Where's what
====================
The SDFG renderer as well as property source is in DIODE_Context_SDFG.
The Optimizations are in DIODE_Context_AvailableTransformations and DIODE_Context_Transformation history,
for current transformations and a backtrace of saved transformations, respectively.


Ground rules for new code
=====================
Do not pass variables between components. It works if they are in the same window, and breaks horribly
otherwise with long hours of debugging attached. Instead, use the DIODE_Project::request functionality,
which provides callbacks (including timeouts) and a namespacing to avoid stale elements being notified.

Do not use null values when storing a state. extendState() will merge even two null values into an empty
object '{}', which will break checks. Generally, it's a good idea to stringify data stored to the state
first.


DIODE REST server
=====================
The DIODE REST server is (conceptually) where the DIODE application is actually run.
It uses a REST interface to talk to clients in a stateless way (except for the running of tasks,
which is close to impossible to do statelessly).

The server also creates a thread, accepting and running programs. This thread (ExecutorServer)
uses a generator to return its output chunk-by-chunk. As it is headless, it uses a copy of a global
or personal DaCe config. Certain values specific to running can be overridden without changing the config.
Compilation- or run-failures happen on the deeper DaCe-level and should be debugged there.

Security
====================
Security was done on a best-effort basis with known leaks. The implementation should only be exposed to
trustworthy parties.
